@startuml

control "Server API" as SERVER
participant ServerProtocol as SP
participant "MessageProtocol \nTCP or SERIAL" as MP
control "Communication Channel \nTCP Socket or Serial Wire" as CHANNEL
actor "Client" as CLIENT





activate SERVER

SERVER -> SP : get_command()
activate SP
  SP -> MP : receive_msg()
  activate MP

  MP -> CHANNEL : read()
  activate CHANNEL


CLIENT -> CHANNEL : write("COMMAND_ID")
activate CHANNEL
CHANNEL --> CLIENT
deactivate CHANNEL

MP <-- CHANNEL : "COMMAND_ID"
deactivate CHANNEL


CLIENT -> CHANNEL : write(command_params)
activate CHANNEL
CHANNEL --> CLIENT
deactivate CHANNEL



CLIENT -> CHANNEL : blocking read
activate CHANNEL





  SP <-- MP : "COMMAND_ID"
  deactivate MP
  SERVER <-- SP : "COMMAND_ID"
  deactivate SP
  SERVER -> SERVER : choose ServerProtocol\nhandler based on "COMMAND_ID"

  SERVER -> SP : handler()
  activate SP
    SP -> MP : receive_msg()
    activate MP
      MP -> CHANNEL : read()
      activate CHANNEL

      MP <-- CHANNEL : command_params
      deactivate CHANNEL
      SP <-- MP : command_params
    deactivate MP
    SP -> SP : execute handler\nbusiness logic

    SP -> MP : send_msg(CommandExecutionResult)
    activate MP
      MP -> CHANNEL : write(CommandExecutionResult)
      activate CHANNEL
      MP <-- CHANNEL
      deactivate CHANNEL




CLIENT <-- CHANNEL : CommandExecutionResult
deactivate CHANNEL



      SP <-- MP
    deactivate MP

  SERVER <-- SP
  deactivate SP

SERVER -> SERVER : blocks trying to get \nnext command


@enduml
